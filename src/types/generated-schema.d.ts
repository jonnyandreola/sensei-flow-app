/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/answers": {
    post: {
      responses: {
        /** Success */
        201: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AnswerPostRequest"];
          "text/json": components["schemas"]["AnswerPostRequest"];
          "application/*+json": components["schemas"]["AnswerPostRequest"];
        };
      };
    };
    patch: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AnswerPatchRequest"];
          "text/json": components["schemas"]["AnswerPatchRequest"];
          "application/*+json": components["schemas"]["AnswerPatchRequest"];
        };
      };
    };
  };
  "/answers/{id}": {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/answers/{id}/vote": {
    post: {
      parameters: {
        path: {
          id: number;
        };
        query: {
          isUp?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/comments": {
    patch: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CommentPatchRequest"];
          "text/json": components["schemas"]["CommentPatchRequest"];
          "application/*+json": components["schemas"]["CommentPatchRequest"];
        };
      };
    };
  };
  "/comments/{id}": {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/comments/{id}/vote": {
    post: {
      parameters: {
        path: {
          id: number;
        };
        query: {
          isUp?: boolean;
        };
      };
      responses: {
        /** Success */
        201: unknown;
        /** Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/questions/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["QuestionDetail"];
            "application/json": components["schemas"]["QuestionDetail"];
            "text/json": components["schemas"]["QuestionDetail"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/questions/new": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["QuestionSummary"][];
            "application/json": components["schemas"]["QuestionSummary"][];
            "text/json": components["schemas"]["QuestionSummary"][];
          };
        };
      };
    };
  };
  "/questions/unanswered": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["QuestionSummary"][];
            "application/json": components["schemas"]["QuestionSummary"][];
            "text/json": components["schemas"]["QuestionSummary"][];
          };
        };
      };
    };
  };
  "/questions/{id}/comments": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Comment"][];
            "application/json": components["schemas"]["Comment"][];
            "text/json": components["schemas"]["Comment"][];
          };
        };
      };
    };
  };
  "/questions/{id}/answers": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Answer"][];
            "application/json": components["schemas"]["Answer"][];
            "text/json": components["schemas"]["Answer"][];
          };
        };
      };
    };
  };
  "/questions": {
    post: {
      responses: {
        /** Success */
        201: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["QuestionPostRequest"];
          "text/json": components["schemas"]["QuestionPostRequest"];
          "application/*+json": components["schemas"]["QuestionPostRequest"];
        };
      };
    };
    patch: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["QuestionPatchRequest"];
          "text/json": components["schemas"]["QuestionPatchRequest"];
          "application/*+json": components["schemas"]["QuestionPatchRequest"];
        };
      };
    };
  };
  "/questions/{id}/answer": {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AnswerRequest"];
          "text/json": components["schemas"]["AnswerRequest"];
          "application/*+json": components["schemas"]["AnswerRequest"];
        };
      };
    };
  };
  "/questions/{id}/comment": {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Comment"];
          "text/json": components["schemas"]["Comment"];
          "application/*+json": components["schemas"]["Comment"];
        };
      };
    };
  };
  "/questions/search/{searchString}": {
    post: {
      parameters: {
        path: {
          searchString: string | null;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Question"][];
            "application/json": components["schemas"]["Question"][];
            "text/json": components["schemas"]["Question"][];
          };
        };
      };
    };
  };
  "/questions/{id}/vote": {
    post: {
      parameters: {
        path: {
          id: number;
        };
        query: {
          isUp?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  "/search/{q}": {
    get: {
      parameters: {
        path: {
          q: string | null;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SearchResult"][];
            "application/json": components["schemas"]["SearchResult"][];
            "text/json": components["schemas"]["SearchResult"][];
          };
        };
      };
    };
  };
  "/users": {
    patch: {
      responses: {
        /** Success */
        200: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserPatchRequest"];
          "text/json": components["schemas"]["UserPatchRequest"];
          "application/*+json": components["schemas"]["UserPatchRequest"];
        };
      };
    };
  };
  "/users/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["User"];
            "application/json": components["schemas"]["User"];
            "text/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/users/{id}/questions": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Question"][];
            "application/json": components["schemas"]["Question"][];
            "text/json": components["schemas"]["Question"][];
          };
        };
      };
    };
  };
  "/users/{id}/comments": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Comment"][];
            "application/json": components["schemas"]["Comment"][];
            "text/json": components["schemas"]["Comment"][];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    AnswerPostRequest: {
      questionID?: number;
      text?: string | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & { [key: string]: { [key: string]: any } };
    AnswerPatchRequest: {
      answerID?: number;
      text?: string | null;
    };
    CommentPatchRequest: {
      commentID?: number;
      text?: string | null;
    };
    VotesDetail: {
      up?: number;
      down?: number;
      total?: number;
    };
    EntityType: 0 | 1 | 2;
    CommentDetail: {
      commentID?: number;
      text?: string | null;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
      voteCount?: number;
      type?: components["schemas"]["EntityType"];
    };
    AnswerDetail: {
      answerID?: number;
      text?: string | null;
      isAccepted?: boolean;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
    };
    QuestionDetail: {
      questionID?: number;
      title?: string | null;
      description?: string | null;
      tags?: string[] | null;
      votes?: components["schemas"]["VotesDetail"];
      created?: string;
      createdByUserName?: string | null;
      createdByUserID?: number;
      edited?: string;
      modifiedByUserName?: string | null;
      modifiedByUserID?: number;
      comments?: components["schemas"]["CommentDetail"][] | null;
      answers?: components["schemas"]["AnswerDetail"][] | null;
    };
    QuestionSummary: {
      questionID?: number;
      title?: string | null;
      created?: string;
      createdBy?: number;
      createdByUserName?: string | null;
      voteCount?: number;
      answerCount?: number;
      hasAcceptedAnswer?: boolean;
      tags?: string[] | null;
      lastAnswerCreated?: string;
      lastAnswerCreatedBy?: number;
      lastAnswerCreatedByUserName?: string | null;
    };
    Comment: {
      commentID?: number;
      type?: number;
      entityID?: number;
      text?: string | null;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
      deleted?: string | null;
      deletedBy?: number | null;
    };
    Answer: {
      answerID?: number;
      questionID?: number;
      text?: string | null;
      isAccepted?: boolean;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
      deleted?: string | null;
      deletedBy?: number | null;
    };
    QuestionPostRequest: {
      title?: string | null;
      description?: string | null;
    };
    QuestionPatchRequest: {
      questionID?: number;
      title?: string | null;
      description?: string | null;
      tags?: string[] | null;
    };
    AnswerRequest: {
      text?: string | null;
    };
    Question: {
      questionID?: number;
      title?: string | null;
      description?: string | null;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
      deleted?: string | null;
      deletedBy?: number | null;
    };
    Tag: {
      tagID?: number;
      name?: string | null;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
    };
    SearchResult: {
      entityID?: number;
      type?: components["schemas"]["EntityType"];
      title?: string | null;
      text?: string | null;
      created?: string;
      createdBy?: number;
      tags?: components["schemas"]["Tag"][] | null;
      voteCount?: number;
      answerCount?: number;
      searchRank?: number;
    };
    UserPatchRequest: {
      userID?: number;
      username?: string | null;
      email?: string | null;
    };
    User: {
      userID?: number;
      username?: string | null;
      email?: string | null;
      isEnabled?: boolean;
      created?: string;
      createdBy?: number;
      modified?: string;
      modifiedBy?: number;
      deleted?: string | null;
      deletedBy?: number | null;
    };
  };
}

export interface operations {}
